// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolMngr.Services.Backoffice.DAL.Context;

namespace SchoolMngr.Services.Backoffice.DAL.Migrations
{
    [DbContext(typeof(BackofficeDbContext))]
    [Migration("20210807214454_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SchoolMngr.BackOffice.Model.Entities.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AssignmentID");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("To")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Assignments", "DOMAIN");
                });

            modelBuilder.Entity("SchoolMngr.BackOffice.Model.Entities.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClassID");

                    b.Property<Guid>("ClassRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DivisionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("EndsAt")
                        .HasColumnType("datetime2");

                    b.Property<short>("EnrolledQty")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Shift")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassRoomId");

                    b.HasIndex("SubjectId")
                        .IsUnique();

                    b.ToTable("Classes", "DOMAIN");
                });

            modelBuilder.Entity("SchoolMngr.BackOffice.Model.Entities.ClassRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClassRoomID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("HasNetworkConexion")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasScreenProjector")
                        .HasColumnType("bit");

                    b.Property<short>("MaxCapacity")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("ClassRooms", "DOMAIN");
                });

            modelBuilder.Entity("SchoolMngr.BackOffice.Model.Entities.Enrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EnrollmentID");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StudentProfileId")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("StudentStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Enrollments", "DOMAIN");
                });

            modelBuilder.Entity("SchoolMngr.BackOffice.Model.Entities.Grade", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("GradeID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Grades", "DOMAIN");
                });

            modelBuilder.Entity("SchoolMngr.BackOffice.Model.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SubjectID");

                    b.Property<string>("CodeName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<short>("MaxAbsencesAllowed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)3);

                    b.Property<short>("MinExamScoreRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)6);

                    b.Property<Guid?>("NextAvailableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.HasIndex("NextAvailableId");

                    b.ToTable("Subjects", "DOMAIN");
                });

            modelBuilder.Entity("SchoolMngr.BackOffice.Model.Entities.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TeacherID");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("EmployeeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdentityUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsTemporary")
                        .HasColumnType("bit");

                    b.Property<string>("Observations")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teachers", "DOMAIN");
                });

            modelBuilder.Entity("SchoolMngr.BackOffice.Model.Entities.Assignment", b =>
                {
                    b.HasOne("SchoolMngr.BackOffice.Model.Entities.Class", "Class")
                        .WithMany("Assingments")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolMngr.BackOffice.Model.Entities.Teacher", "Teacher")
                        .WithMany("Assingments")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolMngr.BackOffice.Model.Entities.Class", b =>
                {
                    b.HasOne("SchoolMngr.BackOffice.Model.Entities.ClassRoom", "ClassRoom")
                        .WithMany("Classes")
                        .HasForeignKey("ClassRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolMngr.BackOffice.Model.Entities.Subject", "Subject")
                        .WithOne("Class")
                        .HasForeignKey("SchoolMngr.BackOffice.Model.Entities.Class", "SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassRoom");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolMngr.BackOffice.Model.Entities.Enrollment", b =>
                {
                    b.HasOne("SchoolMngr.BackOffice.Model.Entities.Class", "Class")
                        .WithMany("Enrollments")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("SchoolMngr.BackOffice.Model.Entities.Subject", b =>
                {
                    b.HasOne("SchoolMngr.BackOffice.Model.Entities.Grade", "Grade")
                        .WithMany("Subjects")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolMngr.BackOffice.Model.Entities.Subject", "NextAvailable")
                        .WithMany("PreviousRequired")
                        .HasForeignKey("NextAvailableId");

                    b.Navigation("Grade");

                    b.Navigation("NextAvailable");
                });

            modelBuilder.Entity("SchoolMngr.BackOffice.Model.Entities.Class", b =>
                {
                    b.Navigation("Assingments");

                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("SchoolMngr.BackOffice.Model.Entities.ClassRoom", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("SchoolMngr.BackOffice.Model.Entities.Grade", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("SchoolMngr.BackOffice.Model.Entities.Subject", b =>
                {
                    b.Navigation("Class");

                    b.Navigation("PreviousRequired");
                });

            modelBuilder.Entity("SchoolMngr.BackOffice.Model.Entities.Teacher", b =>
                {
                    b.Navigation("Assingments");
                });
#pragma warning restore 612, 618
        }
    }
}
